
Criar Virtual Machine para Kali Linux adm64


Baixe e instale o VirtualBox: 
    https://www.virtualbox.org/wiki/Downloads

Baixe a imagem do Kali Linux: 
    https://www.kali.org/get-kali/#kali-virtual-machines

Add Kali Virtual Machine na pasta: 
    user/VirtualBox VMs 

No Oracle VM VirtualBox Manager:
    select kali-linux => start

Update Kali

Once you have your Kali VM up and running, open the Kali Linux Terminal and use the following commands 
to update your system:

    $ sudo apt update -y

    $ sudo apt upgrade -y

    $ sudo apt dist-upgrade -y

 
Update User Accounts

When starting a new operating system it is always a great idea to update default credentials:

    $ sudo passwd kali    (enter in a new more complex password)

    $ sudo useradd -m hapihacker

    $ sudo usermod -a -G sudo hapihacker

    $ sudo chsh -s /bin/zsh hapihacker

  
Burp Suite Community Edition

Burp Suite should come stock with the latest version of Kali, but if it does not then use 
the following command:

    $ sudo apt-get install burpsuite -y

Download Jython (https://www.jython.org/download.html) 
and add the .jar file to the Extender Options:

Foxy Proxy Standard

While Firefox is open use the shortcut CTRL+Shift+A or navigate to https://addons.mozilla.org/en-US/firefox/addon.

    Search for FoxyProxy Standard.
    Add FoxyProxy to Firefox.
    Install FoxyProxy Standard and add it to your browser.
    Click the fox icon at the top-right corner of your browser (next to the URL) and select Options.
    Select Proxies >Add New Proxy >Manual Proxy Configuration.
    Add 127.0.0.1 as the host IP address.
    Update the port to 8080 (Burp Suite’s default proxy settings).
    Under the General tab, rename the proxy to BurpSuite.
    Add a second new proxy:
        Add 127.0.0.1 as the host IP address.
        Update the port to 5555
        Under the General tab, rename the proxy to Postman

 
Burp Suite Certificate

    Start Burp Suite.
    Open your browser of choice.
    Using FoxyProxy, select the BurpSuite proxy. Navigate to http://burpsuite and click the CA Certificate. 
    This should initiate the download of the Burp Suite CA certificate.
    Save the certificate somewhere you can find it.
    Open your browser and import the certificate. In Firefox, open Preferences and use the search bar to 
    look up certificates. Import the certificate.
    In Chrome, open Settings, use the search bar to look up certificates,
    select More>Manage Certificates>Authorities, and import the certificate. 
    If you do not see the BurpSuite cacert.der certificate. (You may need to expand the file type options to “DER” or “All files").

Now that you have the PortSwigger CA certificate added to your browser, you should be able to intercept traffic without experiencing issues.

 
MITMweb Certificate Setup

Now we will also import the cert for MITMweb through a very similar process.

    Stop burpsuite (it's listening on 8080 and mitmweb needs that to work)
    Start mitmweb from the terminal:
    $mitmweb
    Use FoxyProxy in Firefox to send traffic to the BurpSuite proxy (8080).
    Using Firefox Visit mitm.it.
    Download the mitmproxy-ca-cert.pem for Firefox. 
    Return to the Firefox certificates (see Burp Suite Certificate instructions).
    Import the MITMweb (mitmproxy-ca-cert.pem) certificate.

Install Postman

$ sudo wget https://dl.pstmn.io/download/latest/linux64 -O postman-linux-x64.tar.gz && sudo tar -xvzf postman-linux-x64.tar.gz -C /opt && sudo ln -s /opt/Postman/Postman /usr/bin/postman

 
Install mitmproxy2swagger

$ sudo pip3 install mitmproxy2swagger

Install Git

$ sudo apt-get install git

 

 Install Docker

$ sudo apt-get install docker.io docker-compose

 
Install Go

$ sudo apt install golang-go

 
The JSON Web Token Toolkit v2

$ cd /opt

$ sudo git clone https://github.com/ticarpi/jwt_tool

$ cd jwt_tool

$ python3 -m pip install termcolor cprint pycryptodomex requests

(Optional) Make an alias for jwt_tool.py

$ sudo chmod +x jwt_tool.py

$ sudo ln -s /opt/jwt_tool/jwt_tool.py /usr/bin/jwt_tool

 
Install Sublime Text

Install the GPG key:

$ wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/sublimehq-archive.gpg > /dev/null

Select the Stable channel:

$echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list

Update apt sources and install Sublime Text:

$sudo apt-get update

$sudo apt-get install sublime-text

 
Install Kiterunner

$ sudo git clone  https://github.com/assetnote/kiterunner.git

$ cd kiterunner

$ sudo make build

$ sudo ln -s /opt/kiterunner/dist/kr /usr/bin/kr

 
Install Arjun

$ sudo git clone https://github.com/s0md3v/Arjun.git

 
Install OWASP ZAP

$ sudo apt install zaproxy

Once ZAP is installed, make sure to navigate to the Manage Add-Ons (CTRL+U). 
Make sure to apply updates for the Fuzzer and OpenAPI Support.

 
Useful Wordlists

SecLists (https://github.com/danielmiessler/SecLists)

$ sudo wget -c https://github.com/danielmiessler/SecLists/archive/master.zip -O SecList.zip \
&& sudo unzip SecList.zip \
&& sudo rm -f SecList.zip

Hacking-APIs (https://github.com/hAPI-hacker/Hacking-APIs)

$ sudo wget -c https://github.com/hAPI-hacker/Hacking-APIs/archive/refs/heads/main.zip -O HackingAPIs.zip \
&& sudo unzip HackingAPIs.zip \
&& sudo rm -f HackingAPIs.zip

Once you have these tools installed and updated you should be ready to proceed to the next module.




Your API Hacking Lab
Lab Setup


Throughout the course, we will be walking through two vulnerable applications, crAPI and vAPI. Both of these will be used to test out the tools and techniques that will be demonstrated throughout this course. APIsec.ai has hosted an API hacking lab that you can use to practice your skills.

crAPI can be found at crapi.apisec.ai

vAPI can be found at vapi.apisec.ai

 If you would like to set up your own lab, you can either host the vulnerable apps on your local host or on a separate system. Next is a demonstration of how to set these apps up on your local host.
The Completely Ridiculous API (crAPI)

https://github.com/OWASP/crAPI

$mkdir ~/lab 

$cd ~/lab

#sudo curl -o docker-compose.yml https://raw.githubusercontent.com/OWASP/crAPI/main/deploy/docker/docker-compose.yml

$ sudo docker-compose pull

$ sudo docker-compose -f docker-compose.yml --compatibility up -d

If you are having issues installing this locally, you can try the development version described here https://github.com/OWASP/crAPI OR target the one that is hosted by APIsec.

Once the installation is finished, you should be able to check to make sure crAPI is running by using a web browser and navigating to http://127.0.0.1:8888 (crAPI landing page) or http://127.0.0.1:8025  (crAPI Mailhog Server). When you are done using/testing crAPI, you can stop it with docker-compose by using the following command:
$sudo docker-compose stop

 
vAPI

vAPI will be used for many of the assessments throughout this course. Although APIsec will be hosting vAPI, it may be useful to have a local version for testing.

vAPI: https://github.com/roottusk/vapi 

$cd ~/lab
$sudo git clone https://github.com/roottusk/vapi.git
$cd /vapi
$sudo docker-compose up -d

Once vAPI is running you can navigate to http://127.0.0.1/vapi to get to the vAPI home page. 
One important thing to note is that vAPI comes with a prebuilt Postman collection and environment. 
You can access these in the vAPI/postman folder.  

You can import these into Postman to be prepared for testing for future assessments. Simply open Postman, 
select the Import button (top right), and select the two vAPI JSON documents (see above image). 
Finally, confirm the import and select the Import button.

One more thing to note about vAPI is that the Resources folder contains secrets that will be necessary 
to complete certain attacks. The resources folder can be found here.

 

There are many labs that are available to test out the tools and techniques that you learn in this course. 
Check out some of these other vulnerable labs:

Portswigger

    Web Security Academy

TryHackMe

    Bookstore (free)
    IDOR (paid)
    GraphQL (paid)

 

HackTheBox (Retired Machines)

    Craft
    Postman
    JSON
    Node
    Help

 

Github (Vulnerable Apps)

    Pixi
    REST API Goat
    DVWS-node
    Websheep

You will get the most out of this course by getting your hands on the keyboard and hacking APIs. 
After you've learned a new tool or technique, I highly recommend applying your skills to these other labs.

